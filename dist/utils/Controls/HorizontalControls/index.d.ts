import { EventDispatcher, PerspectiveCamera, Vector3 } from 'three';
import { ThreeNumber } from 'src/utils/interface';
type Cameras = PerspectiveCamera;
export declare class HorizontalControls<T extends Cameras = PerspectiveCamera> extends EventDispatcher<{
    change: any;
}> {
    private targetPos;
    private _camera;
    private _input;
    private _canControls;
    private _canRotate;
    private _rotateSpeed;
    private _horRotateRange;
    private _verRotateRange;
    private origin;
    private updater;
    private isMoving;
    private isLocked;
    private isReserve;
    private durationTime;
    private object;
    private cb?;
    private targetData;
    private lookatType;
    private target;
    private lookFront;
    private zoomLength;
    private zoomSpeed;
    private originLength;
    private curZoom;
    private zoomRange;
    private resetCb?;
    constructor(params: {
        camera: T;
        dom: HTMLElement;
        canControls?: boolean;
        canRotate?: boolean;
        isReserve?: boolean;
        rotateSpeed?: number;
        horRotateRange?: [number, number];
        verRotateRange?: [number, number];
        zoomRange?: [number, number];
        position?: ThreeNumber;
        zoomSpeed?: number;
        durationTime?: number;
        lookFront: ThreeNumber;
        callback?: (type: 0 | 1) => void;
        resetCb?: () => void;
    });
    get camera(): T;
    get canControls(): boolean;
    set canControls(can: boolean);
    get canRotate(): boolean;
    set canRotate(can: boolean);
    get rotateSpeed(): number;
    set rotateSpeed(zS: number);
    get horRotateRange(): [number, number];
    set horRotateRange(r: [number, number]);
    private _initInputEvents;
    rotate(movementX?: number, movementY?: number): void;
    zoom(scale: number): void;
    setTarget(target: Vector3, data?: any): void;
    private handlerUpdate;
    private getPer;
    reset(): void;
    makeSafe(): void;
    dispose(): void;
}
export type ControlsParams = typeof HorizontalControls extends new (...args: infer A) => any ? Omit<A[0], 'camera'> : never;
export {};
